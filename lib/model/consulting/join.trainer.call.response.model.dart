///
/// Code generated by jsonToDartModel https://ashamp.github.io/jsonToDartModel/
///
class JoinTrainerCallResponseAgoraDetails {
/*
{
  "token": "0062ae0887f11d64ca7b775782488589042IAAvfhVDxhMqpeEYM7INMxVTZHckFgq0ubTGiMEVSk+z62kdQAnqihZoIgAliIj5ps8RYwQAAQDA+w1jAgDA+w1jAwDA+w1jBADA+w1j",
  "secondsRemaining": -186054
} 
*/

  String? token;
  int? secondsRemaining;

  JoinTrainerCallResponseAgoraDetails({
    this.token,
    this.secondsRemaining,
  });
  JoinTrainerCallResponseAgoraDetails.fromJson(Map<String, dynamic> json) {
    token = json['token']?.toString();
    secondsRemaining = json['secondsRemaining']?.toInt();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['token'] = token;
    data['secondsRemaining'] = secondsRemaining;
    return data;
  }
}

class JoinTrainerCallResponseSessionsDisease {
/*
{
  "diseaseId": "a721f7a0-c20c-11ec-8195-fb3d9a5f7244"
} 
*/

  String? diseaseId;

  JoinTrainerCallResponseSessionsDisease({
    this.diseaseId,
  });
  JoinTrainerCallResponseSessionsDisease.fromJson(Map<String, dynamic> json) {
    diseaseId = json['diseaseId']?.toString();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['diseaseId'] = diseaseId;
    return data;
  }
}

class JoinTrainerCallResponseSessions {
/*
{
  "scheduledDate": "2022-06-29",
  "slotTime": "05:00 PM",
  "slotEndTime": "05:30 PM",
  "status": "BOOKED",
  "callStatus": false,
  "trainerId": "ce9837a0-f60e-11ec-839d-c5a9a0a949f8",
  "trainerName": "Dr. Shivaji Chobe",
  "profilePic": "",
  "callJoinLink": "https://meet.toktown.tk/CYnRHP",
  "consultType": "ADD-ON",
  "sessionId": "251027a0-f6d7-11ec-b328-89c8cf398b30",
  "disease": [
    {
      "diseaseId": "a721f7a0-c20c-11ec-8195-fb3d9a5f7244"
    }
  ],
  "isReschedule": false,
  "bookType": "PAID"
} 
*/

  String? scheduledDate;
  String? slotTime;
  String? slotEndTime;
  String? status;
  bool? callStatus;
  String? trainerId;
  String? trainerName;
  String? profilePic;
  String? callJoinLink;
  String? consultType;
  String? sessionId;
  List<JoinTrainerCallResponseSessionsDisease?>? disease;
  bool? isReschedule;
  String? bookType;

  JoinTrainerCallResponseSessions({
    this.scheduledDate,
    this.slotTime,
    this.slotEndTime,
    this.status,
    this.callStatus,
    this.trainerId,
    this.trainerName,
    this.profilePic,
    this.callJoinLink,
    this.consultType,
    this.sessionId,
    this.disease,
    this.isReschedule,
    this.bookType,
  });
  JoinTrainerCallResponseSessions.fromJson(Map<String, dynamic> json) {
    scheduledDate = json['scheduledDate']?.toString();
    slotTime = json['slotTime']?.toString();
    slotEndTime = json['slotEndTime']?.toString();
    status = json['status']?.toString();
    callStatus = json['callStatus'];
    trainerId = json['trainerId']?.toString();
    trainerName = json['trainerName']?.toString();
    profilePic = json['profilePic']?.toString();
    callJoinLink = json['callJoinLink']?.toString();
    consultType = json['consultType']?.toString();
    sessionId = json['sessionId']?.toString();
    if (json['disease'] != null) {
      final v = json['disease'];
      final arr0 = <JoinTrainerCallResponseSessionsDisease>[];
      v.forEach((v) {
        arr0.add(JoinTrainerCallResponseSessionsDisease.fromJson(v));
      });
      disease = arr0;
    }
    isReschedule = json['isReschedule'];
    bookType = json['bookType']?.toString();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['scheduledDate'] = scheduledDate;
    data['slotTime'] = slotTime;
    data['slotEndTime'] = slotEndTime;
    data['status'] = status;
    data['callStatus'] = callStatus;
    data['trainerId'] = trainerId;
    data['trainerName'] = trainerName;
    data['profilePic'] = profilePic;
    data['callJoinLink'] = callJoinLink;
    data['consultType'] = consultType;
    data['sessionId'] = sessionId;
    if (disease != null) {
      final v = disease;
      final arr0 = [];
      for (var v in v!) {
        arr0.add(v!.toJson());
      }
      data['disease'] = arr0;
    }
    data['isReschedule'] = isReschedule;
    data['bookType'] = bookType;
    return data;
  }
}

class JoinTrainerCallResponse {
/*
{
  "sessions": {
    "scheduledDate": "2022-06-29",
    "slotTime": "05:00 PM",
    "slotEndTime": "05:30 PM",
    "status": "BOOKED",
    "callStatus": false,
    "trainerId": "ce9837a0-f60e-11ec-839d-c5a9a0a949f8",
    "trainerName": "Dr. Shivaji Chobe",
    "profilePic": "",
    "callJoinLink": "https://meet.toktown.tk/CYnRHP",
    "consultType": "ADD-ON",
    "sessionId": "251027a0-f6d7-11ec-b328-89c8cf398b30",
    "disease": [
      {
        "diseaseId": "a721f7a0-c20c-11ec-8195-fb3d9a5f7244"
      }
    ],
    "isReschedule": false,
    "bookType": "PAID"
  },
  "agoraDetails": {
    "token": "0062ae0887f11d64ca7b775782488589042IAAvfhVDxhMqpeEYM7INMxVTZHckFgq0ubTGiMEVSk+z62kdQAnqihZoIgAliIj5ps8RYwQAAQDA+w1jAgDA+w1jAwDA+w1jBADA+w1j",
    "secondsRemaining": -186054
  }
} 
*/

  JoinTrainerCallResponseSessions? sessions;
  JoinTrainerCallResponseAgoraDetails? agoraDetails;

  JoinTrainerCallResponse({
    this.sessions,
    this.agoraDetails,
  });
  JoinTrainerCallResponse.fromJson(Map<String, dynamic> json) {
    sessions = (json['sessions'] != null)
        ? JoinTrainerCallResponseSessions.fromJson(json['sessions'])
        : null;
    agoraDetails = (json['agoraDetails'] != null)
        ? JoinTrainerCallResponseAgoraDetails.fromJson(json['agoraDetails'])
        : null;
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    if (sessions != null) {
      data['sessions'] = sessions!.toJson();
    }
    if (agoraDetails != null) {
      data['agoraDetails'] = agoraDetails!.toJson();
    }
    return data;
  }
}
