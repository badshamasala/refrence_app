///
/// Code generated by jsonToDartModel https://ashamp.github.io/jsonToDartModel/
///
class NutritionInitialAssessmentModelAssessmentsSubjectiveUnitsRanges {
/*
{
  "range": "LOW",
  "low": 0.1,
  "high": 30.1,
  "weightage": 13.1
} 
*/

  String? range;
  double? low;
  double? high;
  double? weightage;

  NutritionInitialAssessmentModelAssessmentsSubjectiveUnitsRanges({
    this.range,
    this.low,
    this.high,
    this.weightage,
  });
  NutritionInitialAssessmentModelAssessmentsSubjectiveUnitsRanges.fromJson(
      Map<String, dynamic> json) {
    range = json['range']?.toString();
    low = json['low']?.toDouble();
    high = json['high']?.toDouble();
    weightage = json['weightage']?.toDouble();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['range'] = range;
    data['low'] = low;
    data['high'] = high;
    data['weightage'] = weightage;
    return data;
  }
}

class NutritionInitialAssessmentModelAssessmentsSubjectiveUnits {
/*
{
  "unit": "Minutes/Day",
  "ranges": [
    {
      "range": "LOW",
      "low": 0.1,
      "high": 30.1,
      "weightage": 13.1
    }
  ],
  "selected": false
} 
*/

  String? unit;
  String? unitPicker;
  String? displayUnit;
  List<NutritionInitialAssessmentModelAssessmentsSubjectiveUnitsRanges?>?
      ranges;
  bool? selected;

  NutritionInitialAssessmentModelAssessmentsSubjectiveUnits({
    this.unit,
    this.unitPicker,
    this.displayUnit,
    this.ranges,
    this.selected,
  });
  NutritionInitialAssessmentModelAssessmentsSubjectiveUnits.fromJson(
      Map<String, dynamic> json) {
    unit = json['unit']?.toString();
    unitPicker = json['unitPicker']?.toString();
    displayUnit = json['displayUnit']?.toString();
    if (json['ranges'] != null) {
      final v = json['ranges'];
      final arr0 =
          <NutritionInitialAssessmentModelAssessmentsSubjectiveUnitsRanges>[];
      v.forEach((v) {
        arr0.add(NutritionInitialAssessmentModelAssessmentsSubjectiveUnitsRanges
            .fromJson(v));
      });
      ranges = arr0;
    }
    selected = json['selected'];
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['unit'] = unit;
    data['unitPicker'] = unitPicker;
    data['displayUnit'] = displayUnit;
    if (ranges != null) {
      final v = ranges;
      final arr0 = [];
      v!.forEach((v) {
        arr0.add(v!.toJson());
      });
      data['ranges'] = arr0;
    }
    data['selected'] = selected;
    return data;
  }
}

class NutritionInitialAssessmentModelAssessmentsSubjective {
/*
{
  "measurement": "PHYSICAL ACTIVITY",
  "replyMessage": "",
  "units": [
    {
      "unit": "Minutes/Day",
      "ranges": [
        {
          "range": "LOW",
          "low": 0.1,
          "high": 30.1,
          "weightage": 13.1
        }
      ],
      "selected": false
    }
  ],
  "answer": 2
} 
*/

  String? measurement;
  String? replyMessage;
  List<NutritionInitialAssessmentModelAssessmentsSubjectiveUnits?>? units;
  String? answer;

  NutritionInitialAssessmentModelAssessmentsSubjective({
    this.measurement,
    this.replyMessage,
    this.units,
    this.answer,
  });
  NutritionInitialAssessmentModelAssessmentsSubjective.fromJson(
      Map<String, dynamic> json) {
    measurement = json['measurement']?.toString();
    replyMessage = json['replyMessage']?.toString();
    if (json['units'] != null) {
      final v = json['units'];
      final arr0 =
          <NutritionInitialAssessmentModelAssessmentsSubjectiveUnits>[];
      v.forEach((v) {
        arr0.add(
            NutritionInitialAssessmentModelAssessmentsSubjectiveUnits.fromJson(
                v));
      });
      units = arr0;
    }
    answer = json['answer']?.toString();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['measurement'] = measurement;
    data['replyMessage'] = replyMessage;
    if (units != null) {
      final v = units;
      final arr0 = [];
      v!.forEach((v) {
        arr0.add(v!.toJson());
      });
      data['units'] = arr0;
    }
    data['answer'] = answer;
    return data;
  }
}

class NutritionInitialAssessmentModelAssessmentsObjectiveOptions {
/*
{
  "option": "Weight loss",
  "weightage": 1.2,
  "replyMessage": "",
  "nextQuestionId": "",
  "optionId": "d78e2120-bbee-11ed-b412-a1a11c0f6d48",
  "selected": false
} 
*/

  String? option;
  double? weightage;
  String? replyMessage;
  String? nextQuestionId;
  String? optionId;
  String? imageUrl;
  bool? selected;

  NutritionInitialAssessmentModelAssessmentsObjectiveOptions({
    this.option,
    this.weightage,
    this.replyMessage,
    this.nextQuestionId,
    this.optionId,
    this.imageUrl,
    this.selected,
  });
  NutritionInitialAssessmentModelAssessmentsObjectiveOptions.fromJson(
      Map<String, dynamic> json) {
    option = json['option']?.toString();
    weightage = json['weightage']?.toDouble();
    replyMessage = json['replyMessage']?.toString();
    nextQuestionId = json['nextQuestionId']?.toString();
    optionId = json['optionId']?.toString();
    imageUrl = json['imageUrl']?.toString();
    selected = json['selected'];
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['option'] = option;
    data['weightage'] = weightage;
    data['replyMessage'] = replyMessage;
    data['nextQuestionId'] = nextQuestionId;
    data['optionId'] = optionId;
    data['imageUrl'] = imageUrl;
    data['selected'] = selected;
    return data;
  }
}

class NutritionInitialAssessmentModelAssessmentsObjective {
/*
{
  "multiChoice": false,
  "options": [
    {
      "option": "Weight loss",
      "weightage": 1.2,
      "replyMessage": "",
      "nextQuestionId": "",
      "optionId": "d78e2120-bbee-11ed-b412-a1a11c0f6d48",
      "selected": false
    }
  ]
} 
*/

  bool? multiChoice;
  String? optionType;
  String? otherOptionAnswer;
  List<NutritionInitialAssessmentModelAssessmentsObjectiveOptions?>? options;

  NutritionInitialAssessmentModelAssessmentsObjective({
    this.multiChoice,
    this.options,
    this.optionType,
    this.otherOptionAnswer
  });
  NutritionInitialAssessmentModelAssessmentsObjective.fromJson(
      Map<String, dynamic> json) {
    multiChoice = json['multiChoice'];
    optionType = json['optionType']?.toString();
    otherOptionAnswer = json['otherOptionAnswer']?.toString();
    if (json['options'] != null) {
      final v = json['options'];
      final arr0 =
          <NutritionInitialAssessmentModelAssessmentsObjectiveOptions>[];
      v.forEach((v) {
        arr0.add(
            NutritionInitialAssessmentModelAssessmentsObjectiveOptions.fromJson(
                v));
      });
      options = arr0;
    }
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['multiChoice'] = multiChoice;
    data['optionType'] = optionType;
    data['otherOptionAnswer'] = otherOptionAnswer;
    if (options != null) {
      final v = options;
      final arr0 = [];
      v!.forEach((v) {
        arr0.add(v!.toJson());
      });
      data['options'] = arr0;
    }
    return data;
  }
}

class NutritionInitialAssessmentModelAssessments {
/*
{
  "objective": {
    "multiChoice": false,
    "options": [
      {
        "option": "Weight loss",
        "weightage": 1.2,
        "replyMessage": "",
        "nextQuestionId": "",
        "optionId": "d78e2120-bbee-11ed-b412-a1a11c0f6d48",
        "selected": false
      }
    ]
  },
  "subjective": {
    "measurement": "PHYSICAL ACTIVITY",
    "replyMessage": "",
    "units": [
      {
        "unit": "Minutes/Day",
        "ranges": [
          {
            "range": "LOW",
            "low": 0.1,
            "high": 30.1,
            "weightage": 13.1
          }
        ],
        "selected": false
      }
    ],
    "answer": 2
  },
  "type": "INITIAL",
  "category": "OBJECTIVE",
  "mappingId": "IN-1",
  "followup": 0,
  "skipable": false,
  "priority": 0,
  "status": "ACTIVE",
  "assessment": "What are your goals from this nutrition program?",
  "assessmentId": "d78e4832-bbee-11ed-b412-a1a11c0f6d48",
  "isCompleted": false
} 
*/

  NutritionInitialAssessmentModelAssessmentsObjective? objective;
  NutritionInitialAssessmentModelAssessmentsSubjective? subjective;
  String? type;
  String? category;
  String? mappingId;
  int? followup;
  bool? skipable;
  int? priority;
  String? status;
  String? assessment;
  String? assessmentId;
  bool? isCompleted;

  NutritionInitialAssessmentModelAssessments({
    this.objective,
    this.subjective,
    this.type,
    this.category,
    this.mappingId,
    this.followup,
    this.skipable,
    this.priority,
    this.status,
    this.assessment,
    this.assessmentId,
    this.isCompleted,
  });
  NutritionInitialAssessmentModelAssessments.fromJson(
      Map<String, dynamic> json) {
    objective = (json['objective'] != null)
        ? NutritionInitialAssessmentModelAssessmentsObjective.fromJson(
            json['objective'])
        : null;
    subjective = (json['subjective'] != null)
        ? NutritionInitialAssessmentModelAssessmentsSubjective.fromJson(
            json['subjective'])
        : null;
    type = json['type']?.toString();
    category = json['category']?.toString();
    mappingId = json['mappingId']?.toString();
    followup = json['followup']?.toInt();
    skipable = json['skipable'];
    priority = json['priority']?.toInt();
    status = json['status']?.toString();
    assessment = json['assessment']?.toString();
    assessmentId = json['assessmentId']?.toString();
    isCompleted = json['isCompleted'];
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    if (objective != null) {
      data['objective'] = objective!.toJson();
    }
    if (subjective != null) {
      data['subjective'] = subjective!.toJson();
    }
    data['type'] = type;
    data['category'] = category;
    data['mappingId'] = mappingId;
    data['followup'] = followup;
    data['skipable'] = skipable;
    data['priority'] = priority;
    data['status'] = status;
    data['assessment'] = assessment;
    data['assessmentId'] = assessmentId;
    data['isCompleted'] = isCompleted;
    return data;
  }
}

class NutritionInitialAssessmentModel {
/*
{
  "assessments": [
    {
      "objective": {
        "multiChoice": false,
        "options": [
          {
            "option": "Weight loss",
            "weightage": 1.2,
            "replyMessage": "",
            "nextQuestionId": "",
            "optionId": "d78e2120-bbee-11ed-b412-a1a11c0f6d48",
            "selected": false
          }
        ]
      },
      "subjective": {
        "measurement": "PHYSICAL ACTIVITY",
        "replyMessage": "",
        "units": [
          {
            "unit": "Minutes/Day",
            "ranges": [
              {
                "range": "LOW",
                "low": 0.1,
                "high": 30.1,
                "weightage": 13.1
              }
            ],
            "selected": false
          }
        ],
        "answer": 2
      },
      "type": "INITIAL",
      "category": "OBJECTIVE",
      "mappingId": "IN-1",
      "followup": 0,
      "skipable": false,
      "priority": 0,
      "status": "ACTIVE",
      "assessment": "What are your goals from this nutrition program?",
      "assessmentId": "d78e4832-bbee-11ed-b412-a1a11c0f6d48",
      "isCompleted": false
    }
  ]
} 
*/

  List<NutritionInitialAssessmentModelAssessments?>? assessments;

  NutritionInitialAssessmentModel({
    this.assessments,
  });
  NutritionInitialAssessmentModel.fromJson(Map<String, dynamic> json) {
    if (json['assessments'] != null) {
      final v = json['assessments'];
      final arr0 = <NutritionInitialAssessmentModelAssessments>[];
      v.forEach((v) {
        arr0.add(NutritionInitialAssessmentModelAssessments.fromJson(v));
      });
      assessments = arr0;
    }
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    if (assessments != null) {
      final v = assessments;
      final arr0 = [];
      v!.forEach((v) {
        arr0.add(v!.toJson());
      });
      data['assessments'] = arr0;
    }
    return data;
  }
}
