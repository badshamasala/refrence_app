///
/// Code generated by jsonToDartModel https://ashamp.github.io/jsonToDartModel/
///
class AppPropertiesWhatsApp {
/*
{
  "enabled": true,
  "number": "919920149020"
} 
*/

  bool? enabled;
  String? number;

  AppPropertiesWhatsApp({
    this.enabled,
    this.number,
  });
  AppPropertiesWhatsApp.fromJson(Map<String, dynamic> json) {
    enabled = json['enabled'];
    number = json['number']?.toString();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['enabled'] = enabled;
    data['number'] = number;
    return data;
  }
}

class AppPropertiesContentDisplay {
/*
{
  "rating": true,
  "views": true,
  "artistName": false,
  "contentTag": true
} 
*/

  bool? rating;
  bool? views;
  bool? artistName;
  bool? contentTag;

  AppPropertiesContentDisplay({
    this.rating,
    this.views,
    this.artistName,
    this.contentTag,
  });
  AppPropertiesContentDisplay.fromJson(Map<String, dynamic> json) {
    rating = json['rating'];
    views = json['views'];
    artistName = json['artistName'];
    contentTag = json['contentTag'];
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['rating'] = rating;
    data['views'] = views;
    data['artistName'] = artistName;
    data['contentTag'] = contentTag;
    return data;
  }
}

class AppPropertiesContent {
/*
{
  "display": {
    "rating": true,
    "views": true,
    "artistName": false,
    "contentTag": true
  }
} 
*/

  AppPropertiesContentDisplay? display;

  AppPropertiesContent({
    this.display,
  });
  AppPropertiesContent.fromJson(Map<String, dynamic> json) {
    display = (json['display'] != null && (json['display'] is Map))
        ? AppPropertiesContentDisplay.fromJson(json['display'])
        : null;
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    if (display != null) {
      data['display'] = display!.toJson();
    }
    return data;
  }
}

class AppPropertiesPaymentGlobalCommunicationsNotAvailableConsultation {
/*
{
  "doctor": "Our live doctor consultation is currently not available in your region.",
  "therapist": "Our one-on-one yoga therapist's session is currently not available in your region."
} 
*/

  String? doctor;
  String? therapist;

  AppPropertiesPaymentGlobalCommunicationsNotAvailableConsultation({
    this.doctor,
    this.therapist,
  });
  AppPropertiesPaymentGlobalCommunicationsNotAvailableConsultation.fromJson(
      Map<String, dynamic> json) {
    doctor = json['doctor']?.toString();
    therapist = json['therapist']?.toString();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['doctor'] = doctor;
    data['therapist'] = therapist;
    return data;
  }
}

class AppPropertiesPaymentGlobalCommunicationsNotAvailable {
/*
{
  "consultation": {
    "doctor": "Our live doctor consultation is currently not available in your region.",
    "therapist": "Our one-on-one yoga therapist's session is currently not available in your region."
  },
  "healing": "This healing program is not accessible in your region. We'll write to you when it's available.",
  "grow": "This is not accessible in your region yet. We'll drop you a message as soon as it's available..",
  "general": "This is not currently available in your region. We will keep you posted when it's available.",
  "personalCare": "This healing program is currently not available in your region. We'll reach out to you when you can access it.",
  "liveEvent": "This is not accessible in your region yet. We'll drop you a message as soon as it's available."
} 
*/

  AppPropertiesPaymentGlobalCommunicationsNotAvailableConsultation?
      consultation;
  String? healing;
  String? grow;
  String? general;
  String? personalCare;
  String? liveEvent;

  AppPropertiesPaymentGlobalCommunicationsNotAvailable({
    this.consultation,
    this.healing,
    this.grow,
    this.general,
    this.personalCare,
    this.liveEvent,
  });
  AppPropertiesPaymentGlobalCommunicationsNotAvailable.fromJson(
      Map<String, dynamic> json) {
    consultation =
        (json['consultation'] != null && (json['consultation'] is Map))
            ? AppPropertiesPaymentGlobalCommunicationsNotAvailableConsultation
                .fromJson(json['consultation'])
            : null;
    healing = json['healing']?.toString();
    grow = json['grow']?.toString();
    general = json['general']?.toString();
    personalCare = json['personalCare']?.toString();
    liveEvent = json['liveEvent']?.toString();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    if (consultation != null) {
      data['consultation'] = consultation!.toJson();
    }
    data['healing'] = healing;
    data['grow'] = grow;
    data['general'] = general;
    data['personalCare'] = personalCare;
    data['liveEvent'] = liveEvent;
    return data;
  }
}

class AppPropertiesPaymentGlobalCommunications {
/*
{
  "notAvailable": {
    "consultation": {
      "doctor": "Our live doctor consultation is currently not available in your region.",
      "therapist": "Our one-on-one yoga therapist's session is currently not available in your region."
    },
    "healing": "This healing program is not accessible in your region. We'll write to you when it's available.",
    "grow": "This is not accessible in your region yet. We'll drop you a message as soon as it's available..",
    "general": "This is not currently available in your region. We will keep you posted when it's available.",
    "personalCare": "This healing program is currently not available in your region. We'll reach out to you when you can access it.",
    "liveEvent": "This is not accessible in your region yet. We'll drop you a message as soon as it's available."
  }
} 
*/

  AppPropertiesPaymentGlobalCommunicationsNotAvailable? notAvailable;

  AppPropertiesPaymentGlobalCommunications({
    this.notAvailable,
  });
  AppPropertiesPaymentGlobalCommunications.fromJson(Map<String, dynamic> json) {
    notAvailable =
        (json['notAvailable'] != null && (json['notAvailable'] is Map))
            ? AppPropertiesPaymentGlobalCommunicationsNotAvailable.fromJson(
                json['notAvailable'])
            : null;
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    if (notAvailable != null) {
      data['notAvailable'] = notAvailable!.toJson();
    }
    return data;
  }
}

class AppPropertiesPaymentGlobal {
/*
{
  "allowAll": false,
  "allowedCountries": [
    "IN"
  ],
  "communications": {
    "notAvailable": {
      "consultation": {
        "doctor": "Our live doctor consultation is currently not available in your region.",
        "therapist": "Our one-on-one yoga therapist's session is currently not available in your region."
      },
      "healing": "This healing program is not accessible in your region. We'll write to you when it's available.",
      "grow": "This is not accessible in your region yet. We'll drop you a message as soon as it's available..",
      "general": "This is not currently available in your region. We will keep you posted when it's available.",
      "personalCare": "This healing program is currently not available in your region. We'll reach out to you when you can access it.",
      "liveEvent": "This is not accessible in your region yet. We'll drop you a message as soon as it's available."
    }
  }
} 
*/

  bool? allowAll;
  List<String?>? allowedCountries;
  AppPropertiesPaymentGlobalCommunications? communications;

  AppPropertiesPaymentGlobal({
    this.allowAll,
    this.allowedCountries,
    this.communications,
  });
  AppPropertiesPaymentGlobal.fromJson(Map<String, dynamic> json) {
    allowAll = json['allowAll'];
    if (json['allowedCountries'] != null &&
        (json['allowedCountries'] is List)) {
      final v = json['allowedCountries'];
      final arr0 = <String>[];
      v.forEach((v) {
        arr0.add(v.toString());
      });
      allowedCountries = arr0;
    }
    communications =
        (json['communications'] != null && (json['communications'] is Map))
            ? AppPropertiesPaymentGlobalCommunications.fromJson(
                json['communications'])
            : null;
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['allowAll'] = allowAll;
    if (allowedCountries != null) {
      final v = allowedCountries;
      final arr0 = [];
      v!.forEach((v) {
        arr0.add(v);
      });
      data['allowedCountries'] = arr0;
    }
    if (communications != null) {
      data['communications'] = communications!.toJson();
    }
    return data;
  }
}

class AppPropertiesPaymentAddOnConsultationTherapist {
/*
{
  "enabled": true
} 
*/

  bool? enabled;

  AppPropertiesPaymentAddOnConsultationTherapist({
    this.enabled,
  });
  AppPropertiesPaymentAddOnConsultationTherapist.fromJson(
      Map<String, dynamic> json) {
    enabled = json['enabled'];
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['enabled'] = enabled;
    return data;
  }
}

class AppPropertiesPaymentAddOnConsultationDoctor {
/*
{
  "enabled": true
} 
*/

  bool? enabled;

  AppPropertiesPaymentAddOnConsultationDoctor({
    this.enabled,
  });
  AppPropertiesPaymentAddOnConsultationDoctor.fromJson(
      Map<String, dynamic> json) {
    enabled = json['enabled'];
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['enabled'] = enabled;
    return data;
  }
}

class AppPropertiesPaymentAddOnConsultation {
/*
{
  "enabled": true,
  "doctor": {
    "enabled": true
  },
  "therapist": {
    "enabled": true
  }
} 
*/

  bool? enabled;
  AppPropertiesPaymentAddOnConsultationDoctor? doctor;
  AppPropertiesPaymentAddOnConsultationTherapist? therapist;

  AppPropertiesPaymentAddOnConsultation({
    this.enabled,
    this.doctor,
    this.therapist,
  });
  AppPropertiesPaymentAddOnConsultation.fromJson(Map<String, dynamic> json) {
    enabled = json['enabled'];
    doctor = (json['doctor'] != null && (json['doctor'] is Map))
        ? AppPropertiesPaymentAddOnConsultationDoctor.fromJson(json['doctor'])
        : null;
    therapist = (json['therapist'] != null && (json['therapist'] is Map))
        ? AppPropertiesPaymentAddOnConsultationTherapist.fromJson(
            json['therapist'])
        : null;
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['enabled'] = enabled;
    if (doctor != null) {
      data['doctor'] = doctor!.toJson();
    }
    if (therapist != null) {
      data['therapist'] = therapist!.toJson();
    }
    return data;
  }
}

class AppPropertiesPaymentAddOn {
/*
{
  "consultation": {
    "enabled": true,
    "doctor": {
      "enabled": true
    },
    "therapist": {
      "enabled": true
    }
  }
} 
*/

  AppPropertiesPaymentAddOnConsultation? consultation;

  AppPropertiesPaymentAddOn({
    this.consultation,
  });
  AppPropertiesPaymentAddOn.fromJson(Map<String, dynamic> json) {
    consultation = (json['consultation'] != null &&
            (json['consultation'] is Map))
        ? AppPropertiesPaymentAddOnConsultation.fromJson(json['consultation'])
        : null;
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    if (consultation != null) {
      data['consultation'] = consultation!.toJson();
    }
    return data;
  }
}

class AppPropertiesPaymentOfferBanner {
/*
{
  "enabled": true,
  "bannerImg": "https://stg-content.aayu.live/aayu/app/payment/offer/offer.png"
} 
*/

  bool? enabled;
  String? bannerImg;

  AppPropertiesPaymentOfferBanner({
    this.enabled,
    this.bannerImg,
  });
  AppPropertiesPaymentOfferBanner.fromJson(Map<String, dynamic> json) {
    enabled = json['enabled'];
    bannerImg = json['bannerImg']?.toString();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['enabled'] = enabled;
    data['bannerImg'] = bannerImg;
    return data;
  }
}

class AppPropertiesPayment {
/*
{
  "offerBanner": {
    "enabled": true,
    "bannerImg": "https://stg-content.aayu.live/aayu/app/payment/offer/offer.png"
  },
  "addOn": {
    "consultation": {
      "enabled": true,
      "doctor": {
        "enabled": true
      },
      "therapist": {
        "enabled": true
      }
    }
  },
  "global": {
    "allowAll": false,
    "allowedCountries": [
      "IN"
    ],
    "communications": {
      "notAvailable": {
        "consultation": {
          "doctor": "Our live doctor consultation is currently not available in your region.",
          "therapist": "Our one-on-one yoga therapist's session is currently not available in your region."
        },
        "healing": "This healing program is not accessible in your region. We'll write to you when it's available.",
        "grow": "This is not accessible in your region yet. We'll drop you a message as soon as it's available..",
        "general": "This is not currently available in your region. We will keep you posted when it's available.",
        "personalCare": "This healing program is currently not available in your region. We'll reach out to you when you can access it.",
        "liveEvent": "This is not accessible in your region yet. We'll drop you a message as soon as it's available."
      }
    }
  }
} 
*/

  AppPropertiesPaymentOfferBanner? offerBanner;
  AppPropertiesPaymentAddOn? addOn;
  AppPropertiesPaymentGlobal? global;

  AppPropertiesPayment({
    this.offerBanner,
    this.addOn,
    this.global,
  });
  AppPropertiesPayment.fromJson(Map<String, dynamic> json) {
    offerBanner = (json['offerBanner'] != null && (json['offerBanner'] is Map))
        ? AppPropertiesPaymentOfferBanner.fromJson(json['offerBanner'])
        : null;
    addOn = (json['addOn'] != null && (json['addOn'] is Map))
        ? AppPropertiesPaymentAddOn.fromJson(json['addOn'])
        : null;
    global = (json['global'] != null && (json['global'] is Map))
        ? AppPropertiesPaymentGlobal.fromJson(json['global'])
        : null;
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    if (offerBanner != null) {
      data['offerBanner'] = offerBanner!.toJson();
    }
    if (addOn != null) {
      data['addOn'] = addOn!.toJson();
    }
    if (global != null) {
      data['global'] = global!.toJson();
    }
    return data;
  }
}

class AppPropertiesServicesAnalytics {
/*
{
  "moengage": true,
  "flurry": true,
  "firebase": true,
  "singular": true,
  "facebook": true
} 
*/

  bool? moengage;
  bool? flurry;
  bool? firebase;
  bool? singular;
  bool? facebook;

  AppPropertiesServicesAnalytics({
    this.moengage,
    this.flurry,
    this.firebase,
    this.singular,
    this.facebook,
  });
  AppPropertiesServicesAnalytics.fromJson(Map<String, dynamic> json) {
    moengage = json['moengage'];
    flurry = json['flurry'];
    firebase = json['firebase'];
    singular = json['singular'];
    facebook = json['facebook'];
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['moengage'] = moengage;
    data['flurry'] = flurry;
    data['firebase'] = firebase;
    data['singular'] = singular;
    data['facebook'] = facebook;
    return data;
  }
}

class AppPropertiesServices {
/*
{
  "analytics": {
    "moengage": true,
    "flurry": true,
    "firebase": true,
    "singular": true,
    "facebook": true
  }
} 
*/

  AppPropertiesServicesAnalytics? analytics;

  AppPropertiesServices({
    this.analytics,
  });
  AppPropertiesServices.fromJson(Map<String, dynamic> json) {
    analytics = (json['analytics'] != null && (json['analytics'] is Map))
        ? AppPropertiesServicesAnalytics.fromJson(json['analytics'])
        : null;
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    if (analytics != null) {
      data['analytics'] = analytics!.toJson();
    }
    return data;
  }
}

class AppPropertiesPoseCorrection {
/*
{
  "enabled": false
} 
*/

  bool? enabled;

  AppPropertiesPoseCorrection({
    this.enabled,
  });
  AppPropertiesPoseCorrection.fromJson(Map<String, dynamic> json) {
    enabled = json['enabled'];
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['enabled'] = enabled;
    return data;
  }
}

class AppPropertiesEvents {
/*
{
  "enabled": true,
  "underMaintainance": false
} 
*/

  bool? enabled;
  bool? underMaintainance;

  AppPropertiesEvents({
    this.enabled,
    this.underMaintainance,
  });
  AppPropertiesEvents.fromJson(Map<String, dynamic> json) {
    enabled = json['enabled'];
    underMaintainance = json['underMaintainance'];
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['enabled'] = enabled;
    data['underMaintainance'] = underMaintainance;
    return data;
  }
}

class AppPropertiesDfi {
/*
{
  "enabled": true,
  "underMaintainance": false
} 
*/

  bool? enabled;
  bool? underMaintainance;

  AppPropertiesDfi({
    this.enabled,
    this.underMaintainance,
  });
  AppPropertiesDfi.fromJson(Map<String, dynamic> json) {
    enabled = json['enabled'];
    underMaintainance = json['underMaintainance'];
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['enabled'] = enabled;
    data['underMaintainance'] = underMaintainance;
    return data;
  }
}

class AppPropertiesConsultationNutritionist {
/*
{
  "enabled": false,
  "underMaintainance": false,
  "free": false,
  "paid": false
} 
*/

  bool? enabled;
  bool? underMaintainance;
  bool? free;
  bool? paid;

  AppPropertiesConsultationNutritionist({
    this.enabled,
    this.underMaintainance,
    this.free,
    this.paid,
  });
  AppPropertiesConsultationNutritionist.fromJson(Map<String, dynamic> json) {
    enabled = json['enabled'];
    underMaintainance = json['underMaintainance'];
    free = json['free'];
    paid = json['paid'];
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['enabled'] = enabled;
    data['underMaintainance'] = underMaintainance;
    data['free'] = free;
    data['paid'] = paid;
    return data;
  }
}

class AppPropertiesConsultationTrainer {
/*
{
  "enabled": false,
  "underMaintainance": false,
  "free": false,
  "paid": false
} 
*/

  bool? enabled;
  bool? underMaintainance;
  bool? free;
  bool? paid;

  AppPropertiesConsultationTrainer({
    this.enabled,
    this.underMaintainance,
    this.free,
    this.paid,
  });
  AppPropertiesConsultationTrainer.fromJson(Map<String, dynamic> json) {
    enabled = json['enabled'];
    underMaintainance = json['underMaintainance'];
    free = json['free'];
    paid = json['paid'];
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['enabled'] = enabled;
    data['underMaintainance'] = underMaintainance;
    data['free'] = free;
    data['paid'] = paid;
    return data;
  }
}

class AppPropertiesConsultationDoctor {
/*
{
  "enabled": true,
  "underMaintainance": false,
  "free": true,
  "paid": false
} 
*/

  bool? enabled;
  bool? underMaintainance;
  bool? free;
  bool? paid;

  AppPropertiesConsultationDoctor({
    this.enabled,
    this.underMaintainance,
    this.free,
    this.paid,
  });
  AppPropertiesConsultationDoctor.fromJson(Map<String, dynamic> json) {
    enabled = json['enabled'];
    underMaintainance = json['underMaintainance'];
    free = json['free'];
    paid = json['paid'];
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['enabled'] = enabled;
    data['underMaintainance'] = underMaintainance;
    data['free'] = free;
    data['paid'] = paid;
    return data;
  }
}

class AppPropertiesConsultation {
/*
{
  "doctor": {
    "enabled": true,
    "underMaintainance": false,
    "free": true,
    "paid": false
  },
  "trainer": {
    "enabled": false,
    "underMaintainance": false,
    "free": false,
    "paid": false
  },
  "nutritionist": {
    "enabled": false,
    "underMaintainance": false,
    "free": false,
    "paid": false
  }
} 
*/

  AppPropertiesConsultationDoctor? doctor;
  AppPropertiesConsultationTrainer? trainer;
  AppPropertiesConsultationNutritionist? nutritionist;

  AppPropertiesConsultation({
    this.doctor,
    this.trainer,
    this.nutritionist,
  });
  AppPropertiesConsultation.fromJson(Map<String, dynamic> json) {
    doctor = (json['doctor'] != null && (json['doctor'] is Map))
        ? AppPropertiesConsultationDoctor.fromJson(json['doctor'])
        : null;
    trainer = (json['trainer'] != null && (json['trainer'] is Map))
        ? AppPropertiesConsultationTrainer.fromJson(json['trainer'])
        : null;
    nutritionist = (json['nutritionist'] != null &&
            (json['nutritionist'] is Map))
        ? AppPropertiesConsultationNutritionist.fromJson(json['nutritionist'])
        : null;
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    if (doctor != null) {
      data['doctor'] = doctor!.toJson();
    }
    if (trainer != null) {
      data['trainer'] = trainer!.toJson();
    }
    if (nutritionist != null) {
      data['nutritionist'] = nutritionist!.toJson();
    }
    return data;
  }
}

class AppPropertiesLiveStatus {
/*
{
  "isLive": true,
  "underMaintenance": false
} 
*/

  bool? isLive;
  bool? underMaintenance;

  AppPropertiesLiveStatus({
    this.isLive,
    this.underMaintenance,
  });
  AppPropertiesLiveStatus.fromJson(Map<String, dynamic> json) {
    isLive = json['isLive'];
    underMaintenance = json['underMaintenance'];
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['isLive'] = isLive;
    data['underMaintenance'] = underMaintenance;
    return data;
  }
}

class AppProperties {
/*
{
  "liveStatus": {
    "isLive": true,
    "underMaintenance": false
  },
  "consultation": {
    "doctor": {
      "enabled": true,
      "underMaintainance": false,
      "free": true,
      "paid": false
    },
    "trainer": {
      "enabled": false,
      "underMaintainance": false,
      "free": false,
      "paid": false
    },
    "nutritionist": {
      "enabled": false,
      "underMaintainance": false,
      "free": false,
      "paid": false
    }
  },
  "dfi": {
    "enabled": true,
    "underMaintainance": false
  },
  "events": {
    "enabled": true,
    "underMaintainance": false
  },
  "poseCorrection": {
    "enabled": false
  },
  "services": {
    "analytics": {
      "moengage": true,
      "flurry": true,
      "firebase": true,
      "singular": true,
      "facebook": true
    }
  },
  "whiteListNumbers": [
    "919930104412"
  ],
  "payment": {
    "offerBanner": {
      "enabled": true,
      "bannerImg": "https://stg-content.aayu.live/aayu/app/payment/offer/offer.png"
    },
    "addOn": {
      "consultation": {
        "enabled": true,
        "doctor": {
          "enabled": true
        },
        "therapist": {
          "enabled": true
        }
      }
    },
    "global": {
      "allowAll": false,
      "allowedCountries": [
        "IN"
      ],
      "communications": {
        "notAvailable": {
          "consultation": {
            "doctor": "Our live doctor consultation is currently not available in your region.",
            "therapist": "Our one-on-one yoga therapist's session is currently not available in your region."
          },
          "healing": "This healing program is not accessible in your region. We'll write to you when it's available.",
          "grow": "This is not accessible in your region yet. We'll drop you a message as soon as it's available..",
          "general": "This is not currently available in your region. We will keep you posted when it's available.",
          "personalCare": "This healing program is currently not available in your region. We'll reach out to you when you can access it.",
          "liveEvent": "This is not accessible in your region yet. We'll drop you a message as soon as it's available."
        }
      }
    }
  },
  "content": {
    "display": {
      "rating": true,
      "views": true,
      "artistName": false,
      "contentTag": true
    }
  },
  "whatsApp": {
    "enabled": true,
    "number": "919920149020"
  }
} 
*/

  AppPropertiesLiveStatus? liveStatus;
  AppPropertiesConsultation? consultation;
  AppPropertiesDfi? dfi;
  AppPropertiesEvents? events;
  AppPropertiesPoseCorrection? poseCorrection;
  AppPropertiesServices? services;
  List<String?>? whiteListNumbers;
  AppPropertiesPayment? payment;
  AppPropertiesContent? content;
  AppPropertiesWhatsApp? whatsApp;

  AppProperties({
    this.liveStatus,
    this.consultation,
    this.dfi,
    this.events,
    this.poseCorrection,
    this.services,
    this.whiteListNumbers,
    this.payment,
    this.content,
    this.whatsApp,
  });
  AppProperties.fromJson(Map<String, dynamic> json) {
    liveStatus = (json['liveStatus'] != null && (json['liveStatus'] is Map))
        ? AppPropertiesLiveStatus.fromJson(json['liveStatus'])
        : null;
    consultation =
        (json['consultation'] != null && (json['consultation'] is Map))
            ? AppPropertiesConsultation.fromJson(json['consultation'])
            : null;
    dfi = (json['dfi'] != null && (json['dfi'] is Map))
        ? AppPropertiesDfi.fromJson(json['dfi'])
        : null;
    events = (json['events'] != null && (json['events'] is Map))
        ? AppPropertiesEvents.fromJson(json['events'])
        : null;
    poseCorrection =
        (json['poseCorrection'] != null && (json['poseCorrection'] is Map))
            ? AppPropertiesPoseCorrection.fromJson(json['poseCorrection'])
            : null;
    services = (json['services'] != null && (json['services'] is Map))
        ? AppPropertiesServices.fromJson(json['services'])
        : null;
    if (json['whiteListNumbers'] != null &&
        (json['whiteListNumbers'] is List)) {
      final v = json['whiteListNumbers'];
      final arr0 = <String>[];
      v.forEach((v) {
        arr0.add(v.toString());
      });
      whiteListNumbers = arr0;
    }
    payment = (json['payment'] != null && (json['payment'] is Map))
        ? AppPropertiesPayment.fromJson(json['payment'])
        : null;
    content = (json['content'] != null && (json['content'] is Map))
        ? AppPropertiesContent.fromJson(json['content'])
        : null;
    whatsApp = (json['whatsApp'] != null && (json['whatsApp'] is Map))
        ? AppPropertiesWhatsApp.fromJson(json['whatsApp'])
        : null;
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    if (liveStatus != null) {
      data['liveStatus'] = liveStatus!.toJson();
    }
    if (consultation != null) {
      data['consultation'] = consultation!.toJson();
    }
    if (dfi != null) {
      data['dfi'] = dfi!.toJson();
    }
    if (events != null) {
      data['events'] = events!.toJson();
    }
    if (poseCorrection != null) {
      data['poseCorrection'] = poseCorrection!.toJson();
    }
    if (services != null) {
      data['services'] = services!.toJson();
    }
    if (whiteListNumbers != null) {
      final v = whiteListNumbers;
      final arr0 = [];
      v!.forEach((v) {
        arr0.add(v);
      });
      data['whiteListNumbers'] = arr0;
    }
    if (payment != null) {
      data['payment'] = payment!.toJson();
    }
    if (content != null) {
      data['content'] = content!.toJson();
    }
    if (whatsApp != null) {
      data['whatsApp'] = whatsApp!.toJson();
    }
    return data;
  }
}
